#https://ln38567.sa-east-1.aws.snowflakecomputing.com QZOFDRB.JB60463 ln38567.sa-east-1

'''
def get_root_path():
    """
    Obtém o caminho raiz do projeto 'assistente-ia-sql'.
    
    Retorna:
    - pathlib.Path: caminho raiz ou None se não for encontrado.
    """
    paths = [p for p in Path(__file__).parents if p.parts[-1] == "assistente-ia-sql"]
    return paths[0] if paths else None

root_path = get_root_path()
if not root_path:
    st.error("Diretório 'ai_sql_shop_assistent' não encontrado!")
    raise SystemExit

# Interface de usuário
st.title("Assistente de SQL IA")
user_input = st.text_input("Escreva sua pergunta aqui")
tab_titles = ["Resultado", "Query", "Diagrama ERD"]
tabs = st.tabs(tab_titles)

# Carregar e exibir o diagrama ERD
erd_image_path = root_path / "images" / "ERD.png"
if erd_image_path.exists():
    erd_image = Image.open(erd_image_path)
    with tabs[2]:
        st.image(erd_image)
else:
    st.warning("Imagem ERD não encontrada!")

# Configurar e usar a cadeia de geração de SQL
prompt_path = root_path / "prompts" / "prompt_template.yaml"
if prompt_path.exists():
    prompt_template = load_prompt(prompt_path)
    llm = OpenAI(temperature=0)
    sql_generation_chain = LLMChain(llm=llm, prompt=prompt_template, verbose=True)

    if user_input:
        sql_query = sql_generation_chain(user_input)
        result = execute_sf_query(sql_query['text'])
        with tabs[0]:
            st.write(result)
        with tabs[1]:
            st.write(sql_query['text'])
else:
    st.error("Arquivo de prompt não encontrado!")
'''


import snowflake.connector
import pandas as pd
from app_secrets import *


def execute_sf_query(p_sql):
    # Parâmetros de conexão Snowflake
    connection_params = {
        'user': SF_USER,
        'password': SF_PASSWORD,
        'account': SF_ACCOUNT,
        'warehouse': SF_WAREHOUSE,
        'database': SF_DATABASE,
        'schema': SF_SCHEMA,
        'role': SF_ROLE
        
    }

    query = p_sql
    
    # Inicializando as variáveis
    cur = None
    conn = None

    try:
        # Estabelecer uma conexão com Snowflake
        conn = snowflake.connector.connect(**connection_params)

        # Criar um objeto cursor
        cur = conn.cursor()

        # Executar a consulta
        cur.execute(query)

        # Buscar todos os resultados
        query_results = cur.fetchall()

        # Obter nomes de colunas da descrição do cursor
        column_names = [col[0] for col in cur.description]
        
        # Criar um DataFrame Pandas
        data_frame = pd.DataFrame(query_results, columns=column_names)
        
        return data_frame
    
    except snowflake.connector.errors.ProgrammingError as pe:
        print("Query Compilation Error:", pe)
        return("Query compilation error")
    
    except snowflake.connector.errors.DatabaseError as de:
        print("Erro no Banco de Dados Snowflake:", de)
        return {"error": "Erro no Banco de Dados Snowflake", "details": str(de)}

    except Exception as e:
        print("Ocorreu um erro:", e)
        return {"error": "Ocorreu um erro", "details": str(e)}

    finally:
        # Fechar o cursor e conexão
        if cur:
            cur.close()
        if conn:
            conn.close()





def create_sf_connection():
    """Estabelece e retorna uma conexão com Snowflake."""
    connection_params = {
        'user': SF_USER,
        'password': SF_PASSWORD,
        'account': SF_ACCOUNT,
        'warehouse': SF_WAREHOUSE,
        'database': SF_DATABASE,
        'schema': SF_SCHEMA,
        'role': SF_ROLE
    }
    return snowflake.connector.connect(**connection_params)

def execute_sf_query(p_sql):
    """
    Executa uma consulta SQL no Snowflake e retorna os resultados em um DataFrame Pandas.

    Args:
    - p_sql (str): A consulta SQL a ser executada.

    Returns:
    - pd.DataFrame: DataFrame contendo os resultados da consulta.
    
    Raises:
    - DatabaseError: Se houver um erro relacionado ao banco de dados.
    - Exception: Para outros erros.
    """
    conn = None
    cur = None

    try:
        conn = create_sf_connection()
        cur = conn.cursor()
        cur.execute(p_sql)
        query_results = cur.fetchall()
        column_names = [col[0] for col in cur.description]
        return pd.DataFrame(query_results, columns=column_names)
    
    except snowflake.connector.errors.DatabaseError as de:
        raise Exception(f"Erro no Banco de Dados Snowflake: {de}")
    except Exception as e:
        raise Exception(f"Ocorreu um erro: {e}")
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()